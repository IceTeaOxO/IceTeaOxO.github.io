<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coding on 夜貓筆記</title>
    <link>https://IceTeaOxO.github.io/categories/coding/</link>
    <description>Recent content in coding on 夜貓筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-tw</language>
    <lastBuildDate>Tue, 21 Mar 2023 16:43:46 +0800</lastBuildDate><atom:link href="https://IceTeaOxO.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kubenetes-概念介紹</title>
      <link>https://IceTeaOxO.github.io/posts/kubenetes1/</link>
      <pubDate>Tue, 21 Mar 2023 16:43:46 +0800</pubDate>
      
      <guid>https://IceTeaOxO.github.io/posts/kubenetes1/</guid>
      <description>在一個kubenetes部屬中，至少含有一個完整的集群，每個集群裡面都會有Master Node控制及群容器的溝通，分派任務的控制平面組件，以及至少一個的Worker Node託管Pod。
Node 是最小的主機單位，集群上所有的Pod會被scheduler分派到適合的Nodes中。每個Node上至少有運行container, kubelet, kube-proxy服務。
Pod 是最小的基礎單元，代表應用的單個實例。每個Pod都是一個或以上的容器以及若干控制器組成。與Docker一樣支持volume，以運行有狀態應用。
kublet 每個Node中都包含一個kublet，是與控制平面溝通的應用，用來確保容器在容器集內運行。當控制平面需要節點進行操作的時候，kublet就會執行該操作。
kube-proxy 每個Node中包含kebe-proxy，用於優化網路代理，負責處理集群內部或外部的網路通信，提供集群內部的負載均衡。
kube-apiserver kube-scheduler kube-controller-manager etcd 有關集群狀態已經集群相關配置設定位於 etcd，以便集群 crash 後的迅速還原當前狀態。
安裝 進入到docker desktop的設定裡面，尋找kubenetes並進行安裝
短篇架構:前言、內容、結論
I. 前言
介紹 Kubernetes 的背景和意義 概述本篇文章的內容 II. Kubernetes 簡介
介紹 Kubernetes 的基本概念和架構 比較 Kubernetes 和傳統的單機部署方式的差異和優勢 解釋 Kubernetes 中的重要概念，如 Pod、Service、Deployment 等 III. Kubernetes 的核心功能
深入探討 Kubernetes 的核心功能，如自動化部署、自動擴展、自動恢復等 說明如何使用 Kubernetes 來管理容器化應用程式 IV. Kubernetes 的應用場景
探討 Kubernetes 在不同的應用場景下的優勢和應用案例，如大型網路應用、雲端原生應用、機器學習和人工智慧等 V. Kubernetes 的生態系統
簡要介紹 Kubernetes 的生態系統和相關技術，如 Istio、Helm、Prometheus 等 探討這些技術和 Kubernetes 之間的關係和互動 VI.</description>
    </item>
    
  </channel>
</rss>
