<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>system design on Pure White</title>
    <link>https://IceTeaOxO.github.io/tags/system-design/</link>
    <description>Recent content in system design on Pure White</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-tw</language>
    <lastBuildDate>Sat, 04 Feb 2023 21:44:15 +0800</lastBuildDate><atom:link href="https://IceTeaOxO.github.io/tags/system-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fenix System</title>
      <link>https://IceTeaOxO.github.io/post/learning/fenix/fenix/</link>
      <pubDate>Sat, 04 Feb 2023 21:44:15 +0800</pubDate>
      
      <guid>https://IceTeaOxO.github.io/post/learning/fenix/fenix/</guid>
      <description>前言 Fenix有鳳凰、不死鳥的意思，具有涅槃重生的特性，Fenix System指的就是一個可以不斷自我重生的系統。
本篇主要收錄本人覺得比較重要的觀念，詳細資料請詳閱參考文件
把後端當作接口 例如現在想要在網頁上新增AI的聊天機器人，網頁是用node.js寫的，人工智能則是python比較常被使用，這時候應該將人工智能的對話服務當作一個街口，透過Restful的溝通協議(遠端調用)來進行數據的交換。
技術會變，應該學習的是如何做出一個可以接受改變的系統 所以微服務的概念出現了，微服務將一個大系統拆分成許多服務，彼此透過接口的方式進行溝通，將自治權還給開發者，也可以更靈活地進行團隊專案的合作。
並且微服務還可以搭配上分散式的方式實現更彈性的提升方法及更快速的部屬服務。
技術很多，程式設計者如何自處 系統開發是一個持續的過程，如果只是做完就再也不管，那當然不需要如此大費周章。
可是對於學習、需要持續改善的專案來說，知道並熟悉相關技能是必須的，因為你會很長一段時間都看到它，如果沒有事先訂好規範，後續的修正會越發困難，直到專案變成一塊巨石。</description>
    </item>
    
  </channel>
</rss>
